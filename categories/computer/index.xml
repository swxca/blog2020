<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>computer on LongAgo</title>
    <link>http://blog.zhang.today/categories/computer/</link>
    <description>Recent content in computer on LongAgo</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020,all rights reserved.</copyright>
    <lastBuildDate>Fri, 24 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.zhang.today/categories/computer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>hugo搭建及自动部署（一）</title>
      <link>http://blog.zhang.today/post/hugo%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%B8%80/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/hugo%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%B8%80/</guid>
      <description>hugo搭建 hugo的本质就是一个小程序，然后这个程序会读取指定的目录结构配置，生成对应的静态资源文件（包括html，css，js）。
关键词：小程序；指定的目录结构；静态资源文件
以下所有步骤都围绕这是三个关键词进行，以下操作可能会遇到git的push不了，hugo因为环境变量不能运行等问题，请自行google
实现关键词一：小程序  因此搭建的第一件事儿就是拿到这个小程序，在计算机上小程序的本质基本都是二进制文件，如windows的exe，linux和mac放在/usr/local/bin里的文件。在这里下载属于你系统的二进制文件。windows并不是很清楚，mac和linux的话，就跟以往一样，把下载到的压缩包解压，拿到hugo文件，移动到/usr/local/bin或者/usr/bin/里面。  补充：mac也可以用brew安装下载，brew install hugo ，但个人认为brew太慢了（可能被墙了），linux可以用apt-get和brew安装下载，但有个前提就是你的linux机器上有apt-get或者brew，apt-get下载到的不一定是新的，brew还需要安装，这一系列事情又需要时间，还有一堆错误等着。
所以，个人推荐，直接用以上二进制的方法去得到这个小程序，这是我尝试过几种方法后的出来的结论，你可以不用花时间尝试了。
# 测试你是否安装成功 $ hugo version 实现关键词二：固定目录结构和文件 得到了hugo程序，那么分解开始说的hugo的本质这句话，就是我们还需要一个目录结构给hugo读取。很显然，hugo会为我们考虑到  # 创建一个给hugo读取文件夹 $ hugo new site yourSiteName 这个yourSiteName就是你网站的名字，文件夹里的内容就是hugo读取用来生成静态资源文件（啰嗦一句给小白，静态资源文件就是一个个网页）的配置。
这时候yourSiteName的文件夹结构，应该如下所示
# yourSiteName的文件夹结构 . ├── archetypes │ └── default.md ├── config.toml ├── content ├── data ├── layouts ├── static └── themes 6 directories, 2 files 到这里先不要急着了解这些文件结构的意义，先跑起来 3. 安装主题 这一步很简单，比如我用的是hugo-swift-theme主题,cd进入到yourSiteName中
$ git submodule add https://github.com/onweru/hugo-swift-theme themes/hugo-swift-theme $ echo &amp;#39;theme = &amp;#34;hugo-swift-theme&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.</description>
    </item>
    
    <item>
      <title>hugo搭建及自动部署（二）</title>
      <link>http://blog.zhang.today/post/hugo%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BA%8C/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/hugo%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BA%8C/</guid>
      <description>自动部署 接上篇，将生成的blog静态资源文件部署到服务端。按理说，将html静态资源文件搭配nginx，放到机器上就可以访问了，那这里为什么叫自动部署呢？自动一词体现在哪儿呢？
按照之前的思路：
首先配置基于nginx的静态网站，nginx配置里有个目录，将静态文件放到这个目录下，就能通过端口访问。
 写博客 hugo生成静态文件 删掉服务端旧的静态文件目录，ssh scp到服务端的已经配置好的静态目录  这里给出我的nginx配置，仅供参考
$ cat /etc/nginx/nginx.conf user 用户; worker_processes auto; pid /run/nginx.pid; events { worker_connections 768; # multi_accept on; } include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; server { listen 80; server_name 你的域名.com; root 你的静态文件夹; index index.html; location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){ root /root/blog2020; } location ^~ /webhook { proxy_pass http://localhost:8002; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } } 需要注意这么几个点(配置里面的中文部分)：
 user 用户  这里要注意一个权限的问题，要保证nginx配置文件的权限合理，一般是www-data。这里用户二字要和你的静态文件用户对应,不然就是403。怎么看一个文件属于哪个用户？ll命令</description>
    </item>
    
    <item>
      <title>消息队列nsq工作流程解析（一）---nsqd组件.md</title>
      <link>http://blog.zhang.today/post/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97nsq%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90%E4%B8%80-nsqd%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97nsq%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90%E4%B8%80-nsqd%E7%BB%84%E4%BB%B6/</guid>
      <description> 这系列文章我想从0开始，在读者的心中构建一个完整的nsq消息队列模型 包括但不限于以下知识点
 nsq整体工作流程 nsq各组件工作细节 nsq代码实战 nsq源码解析   那么什么是消息队列呢?我想有必要在学习nsq之前仔细理解。
什么是nsq？ 这篇文章不是讲nsq如何使用，网上已经有很多对nsq消息队列做名词解释的文章了，关于什么是nsq消息队列，这里可能只做简单的复习。
nsq有三个组件，相互配合做到分布式消息队列:
 nsqd nsqlookupd nsqadmin  网上看了很多文档性质的文章，阅读起来给我的感觉是，就好像组装一个机器人，一股脑写清楚了所有的零件用途。但哪个零件是心脏，哪个零件是指甲和头发，并没有特别提到，因此我在看的过程中有很多疑惑。所以想要理解nsq，还需要庖丁解牛，有主次，分块理解
nsq的主体：nsqd组件 现在让我们忘记其他两个组件，一步步分析
其实nsqd组件本身就是一个消息队列，他可以脱离其他组件工作，因此：
令：概念nsq消息队列=nsqd （忽略组件2，3）
举一个例子，用户在订单系统，付款，下订单成功后，可能会通知三个以上的系统，
如下单成功了：
 通知增加某用户积分（积分系统） 通知减掉已被买走的库存数量（库存系统） 通知商家进行发货（发货系统）  订单系统是如何通知nsqd的呢?订单创建成功后，订单系统会给nsqd发送一条&amp;quot;order_succeed&amp;quot;的通知，nsqd会接收到这条通知，然后nsqd又会把这条消息，发送给每个订阅在nsqd上的系统。这条通知&amp;quot;order_succeed&amp;rdquo;，简单理解就是topic的概念。
 预告：nsqd与订单系统如何通信？是tcp还是http？或是其他通信协议
  一个topic就是程序发布消息的一个逻辑键，当程序第一次发布消息时就会创建topic
 这时候我们发现客户越来越多，积分系统需要排队比较久了，我们要做的就是给积分系统分流，也就是扩展积分系统。积分系统可以是一个容器，也可以是一台机器，我们可以加入一个负载均衡的工具，把流量平均的转发到两套积分系统上，给积分系统分流。像这样，
如果其他系统也出校效率问题，也可以效仿积分系统，加一层负责均衡。负载均衡的分流工作都是一套代码，这样做，我们就已经repeat myself了。因此，nsqd中，已经封装了这个负载均衡工具，名字叫做channel。
 channel与消费者相关，是消费者之间的负载均衡，channel在某种意义上来说是一个“队列”。每当一个发布者发送一条消息到一个topic，消息会被复制到所有消费者连接的channel上，消费者通过这个特殊的channel读取消息，实际上，在消费者第一次订阅时就会创建channel。Channel会将消息进行排列，如果没有消费者读取消息，消息首先会在内存中排队，当量太大时就会被保存到磁盘中。
 解释一下图的流程：
订单系统发送一条&amp;quot;order_succeed&amp;quot;的消息到nsqd消息队列，nsqd消息队列会将这条消息复制到所有channel上。channel会做一个负载均衡，按照一定的算法，将这条消息推送到任意的一台消费者实例上。
总结  因为是本系列的第一篇，所以开头讲明了本系列文章的主要框架和之后会涉及到的内容 简单复习重点，nsq的三个组件 重点介绍了nsqd这个组件的相关概念和工作流程，topic，channel这两个重要概念   预告：消息队列如果是单实例的，那简直太危险了，这个实例一挂，我们的所有系统都将瘫痪，因此，下一节将重点介绍如何用另一个nsq的组件nsqlookupd部署一个分布式的消息队列。
 </description>
    </item>
    
  </channel>
</rss>