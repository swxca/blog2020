<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on LongAgo</title>
    <link>http://blog.zhang.today/post/</link>
    <description>Recent content in Posts on LongAgo</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020,all rights reserved.</copyright>
    <lastBuildDate>Fri, 21 May 2021 14:23:06 +0800</lastBuildDate>
    
	<atom:link href="http://blog.zhang.today/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>劣币驱逐良币，电影院现象及其他</title>
      <link>http://blog.zhang.today/post/%E9%BB%84%E5%B3%A5/%E5%8A%A3%E5%B8%81%E9%A9%B1%E9%80%90%E8%89%AF%E5%B8%81%E7%94%B5%E5%BD%B1%E9%99%A2%E7%8E%B0%E8%B1%A1%E5%8F%8A%E5%85%B6%E4%BB%96/</link>
      <pubDate>Fri, 21 May 2021 14:23:06 +0800</pubDate>
      
      <guid>http://blog.zhang.today/post/%E9%BB%84%E5%B3%A5/%E5%8A%A3%E5%B8%81%E9%A9%B1%E9%80%90%E8%89%AF%E5%B8%81%E7%94%B5%E5%BD%B1%E9%99%A2%E7%8E%B0%E8%B1%A1%E5%8F%8A%E5%85%B6%E4%BB%96/</guid>
      <description>黄峥 2016-08-16
很久没写公众号了，有一部分原因是想写这个题目，但又思绪很乱不知道怎么写，前些天和好朋友饭后闲聊，聊到几个点，算是有点明白，赶紧把它写下来。
 1、 劣币驱逐良币从中性的立场来看 首先劣币、良币是一个中性的概念。最早被英国财政大臣格雷欣发现的、劣币驱逐良币现象是：当市场上有两种含金量不一样的法定货币出现，并且货币供给充足的时候，人民会倾向于把含金量高的货币留在家里收藏，而把含金量低的货币先花出去。这种现象也被称之为格雷欣新现象。这种现象其实挺容易理解，符合人性，就如民国晚期，国家拼命发金圆券（纸币）来代替银元。这时候大家自然会先花纸币，对于造币厂来说，金圆券成本低并且随便印，对它来说有利，同时这对老百姓不利，是劣币。自然的，大家用脚投票，自然市场上“劣币”泛滥，良币涨价，这是大众各自出于自我保护的个体行为，这种个体行为如果没能团结起来，那么单体力量更强大的造币厂会赢，通过印金圆券，大部分人还是被掠夺走了部分个人财富。
那么劣币驱逐良币是否是大家都想阻止的呢？其实未必，首先造币厂希望发行劣币，其次劣币的泛滥是每个民众推动的。大家在说“劣币驱逐良币”不好，有一部分原因是希望别人给他的是良币，而自己要先用掉劣币。这种自私可以理解，但其结果是所有老百姓这个总体吃亏了，每个个体想自保也保不住。大家不团结就形成不了足够的力量来抗衡指定劣币和良币同币值的强制力。
这种现象侧面描述的是自私不团结的个体无法对抗管理者的强制力的现象，另一个角度来说，也描述了通过利用个体自私的力量来进行财富重新分配降低公共服务成本的一种现象。
2、 电影院现象
另一现象是电影院现象，和“劣币驱逐良币”类似，但又不同。它描述的是一个没有组织，又缺乏外部强制力的自私个体的群体，可能出现的一种集体自我伤害的现象，即，电影院里如果前排的人站起来了，那么后排的人也会站起来，结果本来大家可以坐着看的美事，变成了所有人都站着看的辛苦事。
电影院现象，在我看来是更值得大家研究和应对的。因为它是一个群体自我伤害的现象，谁都没有真正获益，不像“劣币驱逐良币”其实是一股力量战胜了另一股力量推动了劣币的普及。当前，平时引用得多的是“劣币驱逐良币”，但大部分时候我以为指的其实是“电影院现象”。
3、 一粒屎坏了一锅汤
电影院里先站起来的那部分人，就如掉进汤里的一粒屎，很快整锅汤只能倒掉，这里指出的是一个比例问题。汤其实是有自我净化能力，如江河污水流入大海，如果比例很低，其实是ok的。但这个比例只要上升到一个临界点，原有的净化能力就崩溃了。很多时候我们会说一个坏现象不是主流没问题，并且它在另一个良性系统里也有，好像两边没有差别一样，这是很危险的想法。要知道坏了一锅汤的一粒屎的大小的临界点往往是很低的，也许是百分之一和百分之五的区别。百分之一能净化，百分之五就只能全部扔掉了。比方说一组人如果骗子的比例只有1%，那对群体作无罪推定这个社会是可以高效良性运转的，但有可能这个比例上升到5%、8%，再作无罪推定就会把其他人逼向骗子一方，这种情况下这个社会就只能作有罪推定，这样一来就是性质上的差异了。两个体系的文化运转效率会发生根本性的变化。但千万注意，这个量变引起的质变往往不是发生在50%，往往在一个低得多的值。在商业上，我们知道Amazon是在图书份额远低过50%时就实质上决定了图书的定价进而颠覆了图书零售业。每个人身上都带有癌细胞，正常是没事的，但如果它的复制和扩散起过某个值，你就得了癌症，而癌症要一个人的命远不需要扩散到50%。
所以当我们讲要看主流，或者类比两个不是100%完美的体系的时候，一定要关注1%和5%的差别，千万不要以为都是小部分是同样性质的。很多时候，质变就在这1%到5%之间。
4、改变群体自我伤害需要巨大能量
如果一个群体一百人，有8个人是骗子，而系统研究表明要比例低于3%无罪推定体系才work，那么，为了把8个人中的5个人转化过来，花的肯定不是5个人的力气，通常得10倍的力气，即50个人同时努力才能转化5个人。一个例子是纽约整治公共场所涂鸦，据说曾经纽约曼哈顿的中央火车站每个都被人涂鸦，为了整治这个，市长花了很大的力气，每天去刷一墙，别人涂一点，他也刷全部，连续反反复复很多很多天，涂鸦才逐渐变少，然后变没有。据说新加坡治理随地吐痰也类似，付出了很多很多倍于破坏者的代价才扭转了“风气”，形成良性运营的体系。
5、渠道有价值，贵的却好卖
改变公众风气的一种办法是直接大范围整肃，另一种则是利用渠道，在商业上有个值得讨论的现象是有时候东西贵了反而好卖。比方说空调这样的产品，需要有人安装，也需要有人推荐，有可能类似小米的互联网直销，把价格打到“最低”还不如“格力”给安装者、渠道以足够利润，虽然看起来渠道的做法抬高了商品的价钱，但实践当中，渠道和服务成本也许是维护某种公共认识最节省的、良性的做法。这种渠道和服务成本是必须的，它把维护某种秩序的代价体现在的明处，而忽略了这种代价的体系可能会走向“劣币驱逐良币”，这种违反经济学教科书所讲的价格供求线原理的现象其实非常非常多。查理.芝格在他的书里就多次说过，我们在消费品，商用软件，硬件等领域也很容易找到这样的例子，这种贵的反而卖的好的现象甚至都有可能是好些领域的主流。
 参考资料</description>
    </item>
    
    <item>
      <title>人生经历篇</title>
      <link>http://blog.zhang.today/post/%E9%BB%84%E5%B3%A5/%E4%BA%BA%E7%94%9F%E7%BB%8F%E5%8E%86%E7%AF%87/</link>
      <pubDate>Fri, 21 May 2021 14:02:12 +0800</pubDate>
      
      <guid>http://blog.zhang.today/post/%E9%BB%84%E5%B3%A5/%E4%BA%BA%E7%94%9F%E7%BB%8F%E5%8E%86%E7%AF%87/</guid>
      <description>从小学以来的经历
 上学
小时候谈不上贫穷，但比较拮据，小时候经常要穿妈妈同事或者是亲戚家小孩的衣服。很多消费习惯和前期的家庭环境有很大关系，跟现在拥有的财富没太大关联。比如我妈到现在都舍不得打车，她会觉得时间又不值钱，太浪费了。这个对我一直有很大影响，包括影响我思考做商业，我脑子里一直都记着我爸妈这样的普通家庭，他们是怎么思考的，他们是怎么生活的。
我的小学很一般，但考上了杭州最好的中学之一，杭州外国语学校。相比于其他中学，接受西方文化影响更早，程度也更深。杭外毕业后被保送到浙大混合班，也就是浙大竺可桢学院的前身。
我在上学时就意识到几个事。一是寒门出贵子是小概率事件，大部分富二代，尤其是官二代非常优秀。二是田忌赛马，在整体资源劣势的情况下可以创造出局部优势，进而有机会获得整个战役的胜利。基于此，平凡人可以成就平凡事。第三是钱是工具，不是目的。
我在上学时有一个较大的遗憾，就是自己目标导向太明确，在追求第一、努力做个好学生上浪费了过多时间，损失了逆反、捣蛋的青春时光，后来才慢慢悟到“60分万岁是个好哲学”。
工作
我第一个实习的公司是微软，但毕业时没有留在微软。一是觉得自己留在微软能看到自己十年后的样子。另外，“人生导师”介绍我去当时还不成熟的Google。所以我就在Google做程序员和产品经理，后来还成为Google第一批回国员工参与Google中国的初创阶段。
我对 Google 有一些个人的观察。
一是Google非常重意识形态，当意识形态发生冲突时，反应超出一般商业公司。
二是Google鼓励基层创新，但核心权力高度集中，有集中办大事的制度优势。
三是Google的“不作恶”深入到了基因，把使命、价值观放在了利润之前，而利润只是随着做正确的事带来的副产品。
四是Google的大部分收购很成功，这些收购案例大多是收购了拥有很好团队的小公司，这些小公司融入到Google的文化逐渐变大。不过也有很多事是Google无力改变的，比如Google没有逃脱层层职业经理人的管理模式，Google在社交上的尝试也不成功。
投资
2002年我去美国读研究生认识了段永平，毕业后在Google工作时又离他家很近，所以开始帮他做一些投资。
创业
我最早创业做的是电商代运营和游戏公司，对于商业来说，只有赚钱才是道德的，应该按照商业的逻辑去做一个本分的商人。
我为什么要再次创业？一是我还喜欢当前的事和团队，我很喜欢深度的和一帮自己喜欢的小伙伴披荆斩棘的创造一些东西。第二是自己还有一些野心，还有一些能力和能量没有释放，隐约觉得当前的机会能让自己做出一个影响面更大、成就感更强的事。
2
创业理念篇
01 拼多多
核心理念
消费升级不是让上海人去过巴黎人的生活，而是让安徽安庆的人有厨纸用，有好水果吃。
只有北京五环内的人才会说移动互联网第三波人口带来的是下沉人群，拼多多关注的是中国最广大的老百姓。移动互联网未必是用户的下沉，而是用户拉平了，它让最广大的中国老百姓拥有了和一线城市一样信息获取的能力和交易能力，这是PC时代做不到的。
拼多多吸引的是追求高性价比的人群，他会买一个爱马仕的包，也会用9.9元买一箱芒果，这跟消费能力没关系。实惠这件事，是一个普适性的需求。比如我妈已经算是一个有钱的妈妈，但她出去买菜、买纸巾，还是会在乎一两块钱的差异，但她同时也买高配的iPhone。传统公司采用一二三线来划分人，拼多多满足的是一个人的很多面。
低价只是拼多多阶段性获取用户的方式，拼多多对性价比的理解是“始终在消费者的期待之外”，拼多多的核心不是便宜，而是满足用户占便宜的感觉。
拼多多试图做消费和娱乐的融合，拼多多的使命就是多实惠多乐趣，让消费者买到更多更实惠的东西，然后在这个过程中更快乐。
拼多多的核心竞争力就是五环内的人群理解不了。
运营情况
现阶段拼多多对整个商品和服务的品质管控都很初级，拼多多正在通过升级供应链和打击假货来提高商品质量。
部分员工对公司的理解依然是流量至上，这些员工在流量思维环境里受了多年教育，拼多多成立不久，和员工的统一思想还没做得很好，得从上往下贯彻。现在的情况是我在这一头，整个社会和媒体在流量的那一头，员工可能在中间。
拼多多对运营员工的考核是留存、复购第一，GMV第二。
未来发展
拼多多不会做采销，也不会做物流和配送，对供应链升级是拼多多长期的战略重点。拼多多的最终模式是使得上游能做批量定制化生产。
全品类扩张依然是传统的流量逻辑，品牌升级也是一个五环内人群俯视的视角。拼多多不一定要品牌升级、要全品类，拼多多要做的事情永远是匹配，让合适的人在合适的场景下买到合适的东西。
拼多多目前没想做服务电商，因为实物电商已经足够大。服务电商是流量思维，即流量灌进来，用不同的服务去消耗这个流量。拼多多的出现就是因为不用旧思维，在以人为先的思维下，先想这个人需要什么。
02
与竞争对手
拼多多与淘宝的模式有本质的不同。淘宝是流量逻辑，主体是搜索，用户要自己去找商品，所以需要海量SKU来满足长尾需求。拼多多代表的是匹配，推荐商品给消费者，SKU有限，但要满足结构性丰富。淘宝一直倡导C2B但做不起来，就是因为淘宝的千人千面相当于个性化搜索，但搜索本身是长尾的，很难做反向定制。而拼多多是把海量流量集中到有限商品里，有了规模之后再反向定制，极大降低成本。这也就是沃尔玛和Costco的差别，拼多多的终级定位就是针对不同的人群做不同的Costco。
拼多多和淘宝是错位竞争，争夺的是同一批用户的不同场景，错位才会成长的更快。拼多多并不想做第二个阿里，拼多多的存在本身就是一种模式，你可以说我low，说我低级，但你无法忽视我。
京东、唯品会和蘑菇街都试验过类似拼多多的模式，但对它们来说，拼团只是一个创造GMV增长工具，拼多多是人的逻辑，通过拼团了解人，通过人推荐物，后期会过渡到机器推荐物。拼多多在APP里几乎没有搜索，也不设购物车，可以想象把今日头条下的信息流换成商品流就是拼多多。
03
与腾讯的关系
我认为腾讯并没有扶持拼多多，因为拼多多也被封了很多次。京东和蘑菇街可以在微信的入口做微选，但是拼多多没法做。2018年前拼多多和腾讯签署了一份互不挖猎协议，拼多多要挖腾讯的人，只有腾讯同意才可以。腾讯更像是一个普通的财务投资人，不会有特殊的好与不好，我不认为拼多多是腾讯系。
当出现谣言说拼多多诈骗，并在微信群广泛传播时，我寻求微信的帮助被拒绝，微信说如果是阿里来找就能处理。我认为微信帮拼多多，群众会说因为腾讯是拼多多的股东，微信帮阿里辟谣就叫格局高。
腾讯的儿子太多，即便拼多多死了腾讯依然不会死。腾讯投资拼多多的逻辑不是为了和阿里强竞争，更多的是商人逻辑，因为投资拼多多有回报，竞争只是商业ROI计算的副产品。
阿里和腾讯对线下零售的占比都很低，当抛开流量思维，聚焦场景时空间依然很大。
腾讯做电商失败的原因是它们认为电商是流量*转换率=GMV，流量逻辑在今天无法成功。
04
投资和创业
巴菲特说买股票就是买part of the company，要有长期持有的心态去寻找好的生意和合伙人。这和创业很像，一方面要关注生意的模式，选择正确的生意模式，要花大量时间去研究这个生意模式的细节。另一方面要挑好的“合伙人”，在投资时要把创始人和CEO当成自己未来的合伙人，看自己是不是愿意和他们长期做事。
投资除了关注好生意，好团队，还需要在乎是否是好价钱，这和创业也很相似，查理芒格让巴菲特意识到该用一个合理的价钱去买好公司，而不是花时间去捡烟蒂（价格便宜，有些残余价值的、但往往不那么好的公司）。同样，一个好的公司应该花力气去解决/克服那些正确又难的问题，而不是四处捡一大堆芝麻。
投资另一个和价钱相关的点是看这个deal in loss是否整体可以承受，从创业的角度看就是投入一个事业的时候要看会不会把自己搞死，活着是创业的第一要务。同时又要用另一个角度来评估，即能不能赢，有没有足够的力量去赢。
和投资特别要关注商业模型一样，创业本身对行业及生意模式的选择也往往决定了很大一部分结果，也就是要花大量时间去研究什么是正确的事，然后再想如何把事做正确。在正确的方向上逐步前进远比在不正确的方向狂奔要好。创业很多时候和投资一样，选择比努力重要。在正确的道路上前行哪怕慢一点，但像投资中复利的连续回报也是很厉害的。
巴菲特在谈到投资标的时候，经常会提到生意的护城河。如果把创业过程中的各种决策都当做是投资决策，那我们得分辨我们用时间和钱换来的东西哪些是资产，哪些是费用。那些随着时间流逝，对加深生意护城河有利的往往是“资产”，那些时间越久对自己越不利的可以看成是费用。在资产的购置上，错误的浪费其实是不太会的，最多只是买贵了一些。而在费用的浪费上则非常可恶，往往还有负作用。
3
思维方式篇
认知能力
对于未知领域，我通常会采取比较原始的办法，就是自己去体验和感受，用常识来判断。大部分知识是没用的，遇到问题再解决问题。我不会去规划未来五年、十年，我会想一个很远的目标和很近的目标。
绝大多数人在绝大多数方面都比我强，我只在很少的方面比很少的人强。比如隔绝外部压力，回归本源理性思考的能力，有时候有点逆向思考的能力。以前做二级市场发现自己好像天生不太容易在很多人恐惧的时候恐惧，而容易在大众热情的时候悲观。
对电影院现象的思考</description>
    </item>
    
    <item>
      <title>go基础之slice</title>
      <link>http://blog.zhang.today/post/go/go%E5%9F%BA%E7%A1%80%E4%B9%8Bslice/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/go/go%E5%9F%BA%E7%A1%80%E4%B9%8Bslice/</guid>
      <description>slice与数组的关系 slice单词的翻译的名词有薄片，片的意思，动词是切片。所以slice就像数组的一片，他不是一个数组，只有依赖底层数组，slice才有意义，这从slice的定义就可以看出。
slice是一个轻量级的数据结构，翻译过来就是slice就像type xxx struct一样，是一种数据结构，主要构成是：
 指针，指针指向第一个slice元素对应的底层数组元素的地址，要注意的是slice的第一个元素并不一定就是数组的第一个元素。 长度，对应slice中元素的数目。 容量，长度不能超过容量，容量一般是从slice的开始位置到底层数据的结尾位置。  知识点概括  slice的定义在上面部分已经给出 s:=a[i,j],a是一个数组，这个表达式的意思就是创建了一个新的slice，叫做s。引用a的从第i个元素开始，第j-1个元素截止。 s[:],s[:2],s[4:],这种不填索引的情况，代表着直到结尾或者开始。这种操作，叫切片操作。 slice的赋值，传递，都是传递着slice的指针。  func reverse(s []int) { for i, j := 0, len(s)-1; i &amp;lt; j; i, j = i+1, j-1 { s[i], s[j] = s[j], s[i] } } slice的初始化和数组完全类似，只是不指定长度 slice之间不能比较，参考不可比较主要是由于间接引用造成的。slice只能和nil比较 slice为nil，len和cap都是0，但slice非nil，len和cap也可能是0  slice的实现 </description>
    </item>
    
    <item>
      <title>go基础之数组</title>
      <link>http://blog.zhang.today/post/go/go%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/go/go%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E7%BB%84/</guid>
      <description>我认为学习一门语言重要的不是去记一些，如何定义数组，数组什么形式，&amp;hellip;型定义，这些语法的东西，因为计算机语言跟我们用来沟通的语言有很多相似之处，语言的本质是用来交流，我们学习英文会记很多语法，但最后发现也没有因为我们记了这么多语法就能更好的和外国人交流。舍本逐末不仅浪费时间，还消耗精力。我认为更多的时间应该应该放在理解更底层的东西
 知识点概括  数组是固定长度的，在go语言中我们一般用slice代替数组，因为slice可以动态的改变长度。 数组所有元素的类型必须相同。 数组的0值，就是对应数组每个元素的0值。 数组的定义：  var q [3]int = [3]int{1, 2, 3} q := [&amp;hellip;]int{1, 2, 3} a:=[3]int{1,2,3}     注意，在类型判断中，区别array和slice的唯一区别就是array是[3]int,slice是[]int
 数组由两部分组成：长度和数据类型，所以判断两个数组是否相等，一定是长度和数据类型都相等的情况下，每个元素分别相等。 数组也可以像struct那样，字面量初始化。把数组看成是一个  array{ index int obj object }
example := [&amp;hellip;]string{1: &amp;ldquo;$&amp;rdquo;, 2: &amp;ldquo;€&amp;rdquo;, 3: &amp;ldquo;￡&amp;rdquo;, 4: &amp;ldquo;￥&amp;rdquo;}
这里，0的下标为空string。还比如：r := [&amp;hellip;]int{99: -1}，定义了一个含有100个元素的数组r，最后一个元素被初始化为-1，其它元素都是用0初始化。 7. 数组的创建，赋值，传递，都是值的复制。
a:=[3]int{1,2,3} b:=a a[1]=100 fmt.Printf(&amp;#34;a= %v\n&amp;#34;,a) fmt.Printf(&amp;#34;b= %v\n&amp;#34;,b) // output: // a= [1,100,3] // b= [1,2,3] 从数组到slice go语言肯定不是平白无故搞出来一个slice，语言的语法糖的初衷肯定是想要方便我们开发者的，比如es6里那么多好用的语法糖。所以，看到一个新的用法，我们要开始感兴趣，而不是觉得麻烦，不想去学习新东西，因为用起来很可能会提升你的开发效率，事半功倍。</description>
    </item>
    
    <item>
      <title>从gopath到gomod</title>
      <link>http://blog.zhang.today/post/go/%E4%BB%8Egopath%E5%88%B0gomod/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/go/%E4%BB%8Egopath%E5%88%B0gomod/</guid>
      <description>本文不只局限在go语言，想从计算机语言的角度出发，从为什么需要环境变量讲起，一次性讲明白关于go的依赖，环境变量，gomod等一系列概念
 为什么需要环境变量？ 除了html之类的文本标记语言之外，无论是java还是go，又或是别的语言，基本都需要环境变量。我们基本上能看到，每种语言的第一课都是配置环境变量，比如，设置javabin，javahome之类的，go语言的话就是gopath，gobin。
每次配置这些东西，如果没有搞清楚原理，那几乎是遇到问题，就要研究半天，所以这里想一次性讲明白底层的原理。</description>
    </item>
    
    <item>
      <title>计算机系统概览</title>
      <link>http://blog.zhang.today/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%A7%88/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%A7%88/</guid>
      <description> 这篇文章是为了解释计算机中什么是进程而写的，同时也为了复习计算机操作系统的相关知识。
 我们在谈什么？ 当我们在谈计算机系统的时候，我们究竟在谈什么？个人认为，当我们在谈计算机系统的时候，就已经在很大程度上抛开了程序员的某些特性，我们不仅仅是一个写代码的人，同时也是一个设计师，就像我们中国美丽的传说，女娲造人，盘古开天地一样，我们是在设计一整套规则,在这套规则下，一生二二生三三生万物，必须能够自然运转。所以，我们要转变思路，抛开代码里的，01010101011100，设计不是非此即彼，很难做到具象的理解，就像很多漫画科普计算机的文，我觉得其实误区不可谓不大，太难用具体的东西来描述，这时候语言的局限性就来了。如果开发系统，那就去读《unix内核编程》，《计算机操作系统》之类的书，如果想做到整体明白，不妨看看此文。代表个人理解，仅做参考。
在研究计算机系统的过程中，我们常从两个角度分析问题，即：
 从逻辑上讲 从物理上讲  计算机系统概览 以下概念解释非常枯燥，可以先看下一小节hello world，有疑问再回这节找概念 func main() { fmt.Println(&amp;#34;hello world&amp;#34;) } I/O设备 以I/O总线为分界线，下面部分是我们常见的一些鼠标，键盘一些控制器设备或者是适配器。还有储存文件的磁盘，比如这段代码，开始就存在下面的磁盘上。
总线 往上走就是总线，总线负责携带和在各个部件间传递信息。从这句话就能看出总线的意义非常重要，因为计算机执行一段程序的本质就是各个部件间的信息复制和传递。总线每次只能传送一个字到其他部件，这个字就是word，字长。现在一般是64bit。
主存和cpu 主存也就是平常所说的内存，如果电脑突然断电或者重启，那主存的内容也会消失，所以主存是一个临时的存储设备。主存从逻辑上讲，是一个线性的字节数组，每个字节都有其唯一的地址（数组索引），从物理上讲，是一组动态的随机存取储存器芯片组成。这里存放着不同的机器指令
CPU又叫处理器，处理器的核心是一个word的存储设备，称为程序计数器(PC),在任何时候，PC都指向主存中的某条机器语言指令。处理器从PC指向的主存处，读取指令，解释指令中的位，执行该指令A。
寄存器文件是由一些1字长的寄存器组成。
A指令包括但不限于:
 加载,把一个字从主存复制到寄存器，以覆盖寄存器文件原来的内容。 存储，把一个字从寄存器复制到主存的某个位置，以覆盖这个位置上原来的内容。 操作，把两个寄存器复制到ALU，ALU对这两个字做算术操作，并将结果放到一个寄存器中，以覆盖该寄存器中原来的内容。  hello world # hello.go func main() { fmt.Println(&amp;#34;hello world&amp;#34;) } 终于，概念解释完了。我们具体捕捉一下一段程序在这个系统中的踪迹。
这段代码开始是在磁盘里，我们将这段代码经过了编译，链接等各种阶段，把它变成了一个可执行文件，只有变成这种格式的文件，才可以被加载到内存中。当我们在键盘上./hello的时候，计算机将磁盘中的文件内容，copy到了主存。然后等PC指到了这段代码的指令，cpu将对代码进行解释和执行，指令本身是print，那么就是将hello world 复制到寄存器文件，再从寄存器文件中复制到显示器。
注意，以上任何操作都离不开总线，比如最后一步，从寄存器文件到显示器。
这也就是为什么时候说，计算机中执行一段程序，要经过很多次在磁盘等IO设备， 主存，cpu等设备之间的复制。这些设备的复制传递速度不一（根据机械原理，较大的存储设备要比较小的存储设备运行的慢），是导致计算机性能出现瓶颈的原因之一。
总结 理解了以上内容，才能更好的理解进程，线程等概念，才能更好的回答比如，进程和线程之间的关系到底是什么？进程退出了，线程还能运行吗？主线程退出了，其他线程还在吗？下一节将是一些更感性的概念：
 上下文context是什么 进程是一种抽象，是计算机科学中，最成功的最深刻的 概念 之一  </description>
    </item>
    
    <item>
      <title>消息队列nsq工作流程解析（一）---nsqd组件.md</title>
      <link>http://blog.zhang.today/post/go/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97nsq%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90%E4%B8%80-nsqd%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/go/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97nsq%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90%E4%B8%80-nsqd%E7%BB%84%E4%BB%B6/</guid>
      <description> 这系列文章我想从0开始，在读者的心中构建一个完整的nsq消息队列模型 包括但不限于以下知识点
 nsq整体工作流程 nsq各组件工作细节 nsq代码实战 nsq源码解析   那么什么是消息队列呢?我想有必要在学习nsq之前仔细理解。
什么是nsq？ 这篇文章不是讲nsq如何使用，网上已经有很多对nsq消息队列做名词解释的文章了，关于什么是nsq消息队列，这里可能只做简单的复习。
nsq有三个组件，相互配合做到分布式消息队列:
 nsqd nsqlookupd nsqadmin  网上看了很多文档性质的文章，阅读起来给我的感觉是，就好像组装一个机器人，一股脑写清楚了所有的零件用途。但哪个零件是心脏，哪个零件是指甲和头发，并没有特别提到，因此我在看的过程中有很多疑惑。所以想要理解nsq，还需要庖丁解牛，有主次，分块理解
nsq的主体：nsqd组件 现在让我们忘记其他两个组件，一步步分析
其实nsqd组件本身就是一个消息队列，他可以脱离其他组件工作，因此：
令：概念nsq消息队列=nsqd （忽略组件2，3）
举一个例子，用户在订单系统，付款，下订单成功后，可能会通知三个以上的系统，
如下单成功了：
 通知增加某用户积分（积分系统） 通知减掉已被买走的库存数量（库存系统） 通知商家进行发货（发货系统）  订单系统是如何通知nsqd的呢?订单创建成功后，订单系统会给nsqd发送一条&amp;quot;order_succeed&amp;quot;的通知，nsqd会接收到这条通知，然后nsqd又会把这条消息，发送给每个订阅在nsqd上的系统。这条通知&amp;quot;order_succeed&amp;rdquo;，简单理解就是topic的概念。
 预告：nsqd与订单系统如何通信？是tcp还是http？或是其他通信协议
  一个topic就是程序发布消息的一个逻辑键，当程序第一次发布消息时就会创建topic
 这时候我们发现客户越来越多，积分系统需要排队比较久了，我们要做的就是给积分系统分流，也就是扩展积分系统。积分系统可以是一个容器，也可以是一台机器，我们可以加入一个负载均衡的工具，把流量平均的转发到两套积分系统上，给积分系统分流。像这样，
如果其他系统也出校效率问题，也可以效仿积分系统，加一层负责均衡。负载均衡的分流工作都是一套代码，这样做，我们就已经repeat myself了。因此，nsqd中，已经封装了这个负载均衡工具，名字叫做channel。
 channel与消费者相关，是消费者之间的负载均衡，channel在某种意义上来说是一个“队列”。每当一个发布者发送一条消息到一个topic，消息会被复制到所有消费者连接的channel上，消费者通过这个特殊的channel读取消息，实际上，在消费者第一次订阅时就会创建channel。Channel会将消息进行排列，如果没有消费者读取消息，消息首先会在内存中排队，当量太大时就会被保存到磁盘中。
 解释一下图的流程：
订单系统发送一条&amp;quot;order_succeed&amp;quot;的消息到nsqd消息队列，nsqd消息队列会将这条消息复制到所有channel上。channel会做一个负载均衡，按照一定的算法，将这条消息推送到任意的一台消费者实例上。
总结  因为是本系列的第一篇，所以开头讲明了本系列文章的主要框架和之后会涉及到的内容 简单复习重点，nsq的三个组件 重点介绍了nsqd这个组件的相关概念和工作流程，topic，channel这两个重要概念   预告：消息队列如果是单实例的，那简直太危险了，这个实例一挂，我们的所有系统都将瘫痪，因此，下一节将重点介绍如何用另一个nsq的组件nsqlookupd部署一个分布式的消息队列。
 </description>
    </item>
    
    <item>
      <title>hugo搭建及自动部署（二）</title>
      <link>http://blog.zhang.today/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/hugo%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BA%8C/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/hugo%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BA%8C/</guid>
      <description>自动部署 接上篇，将生成的blog静态资源文件部署到服务端。按理说，将html静态资源文件搭配nginx，放到机器上就可以访问了，那这里为什么叫自动部署呢？自动一词体现在哪儿呢？
按照之前的思路：
首先配置基于nginx的静态网站，nginx配置里有个目录，将静态文件放到这个目录下，就能通过端口访问。
 写博客 hugo生成静态文件 删掉服务端旧的静态文件目录，ssh scp到服务端的已经配置好的静态目录  这里给出我的nginx配置，仅供参考
$ cat /etc/nginx/nginx.conf user 用户; worker_processes auto; pid /run/nginx.pid; events { worker_connections 768; # multi_accept on; } include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; server { listen 80; server_name 你的域名.com; root 你的静态文件夹; index index.html; location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){ root /root/blog2020; } location ^~ /webhook { proxy_pass http://localhost:8002; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } } 需要注意这么几个点(配置里面的中文部分)：
 user 用户  这里要注意一个权限的问题，要保证nginx配置文件的权限合理，一般是www-data。这里用户二字要和你的静态文件用户对应,不然就是403。怎么看一个文件属于哪个用户？ll命令</description>
    </item>
    
    <item>
      <title>hugo搭建及自动部署（一）</title>
      <link>http://blog.zhang.today/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/hugo%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%B8%80/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/hugo%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%B8%80/</guid>
      <description>hugo搭建 hugo的本质就是一个小程序，然后这个程序会读取指定的目录结构配置，生成对应的静态资源文件（包括html，css，js）。
关键词：小程序；指定的目录结构；静态资源文件
以下所有步骤都围绕这是三个关键词进行，以下操作可能会遇到git的push不了，hugo因为环境变量不能运行等问题，请自行google
实现关键词一：小程序  因此搭建的第一件事儿就是拿到这个小程序，在计算机上小程序的本质基本都是二进制文件，如windows的exe，linux和mac放在/usr/local/bin里的文件。在这里下载属于你系统的二进制文件。windows并不是很清楚，mac和linux的话，就跟以往一样，把下载到的压缩包解压，拿到hugo文件，移动到/usr/local/bin或者/usr/bin/里面。  补充：mac也可以用brew安装下载，brew install hugo ，但个人认为brew太慢了（可能被墙了），linux可以用apt-get和brew安装下载，但有个前提就是你的linux机器上有apt-get或者brew，apt-get下载到的不一定是新的，brew还需要安装，这一系列事情又需要时间，还有一堆错误等着。
所以，个人推荐，直接用以上二进制的方法去得到这个小程序，这是我尝试过几种方法后的出来的结论，你可以不用花时间尝试了。
# 测试你是否安装成功 $ hugo version 实现关键词二：固定目录结构和文件 得到了hugo程序，那么分解开始说的hugo的本质这句话，就是我们还需要一个目录结构给hugo读取。很显然，hugo会为我们考虑到  # 创建一个给hugo读取文件夹 $ hugo new site yourSiteName 这个yourSiteName就是你网站的名字，文件夹里的内容就是hugo读取用来生成静态资源文件（啰嗦一句给小白，静态资源文件就是一个个网页）的配置。
这时候yourSiteName的文件夹结构，应该如下所示
# yourSiteName的文件夹结构 . ├── archetypes │ └── default.md ├── config.toml ├── content ├── data ├── layouts ├── static └── themes 6 directories, 2 files 到这里先不要急着了解这些文件结构的意义，先跑起来 3. 安装主题 这一步很简单，比如我用的是hugo-swift-theme主题,cd进入到yourSiteName中
$ git submodule add https://github.com/onweru/hugo-swift-theme themes/hugo-swift-theme $ echo &amp;#39;theme = &amp;#34;hugo-swift-theme&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhang.today/post/go/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%87%BD%E6%95%B0%E4%B8%8E%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/go/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%87%BD%E6%95%B0%E4%B8%8E%E6%96%B9%E6%B3%95/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>