<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on LongAgo</title>
    <link>http://blog.zhang.today/post/</link>
    <description>Recent content in Posts on LongAgo</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2020,all rights reserved.</copyright>
    <lastBuildDate>Thu, 21 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.zhang.today/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go基础之slice</title>
      <link>http://blog.zhang.today/post/go/go%E5%9F%BA%E7%A1%80%E4%B9%8Bslice/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/go/go%E5%9F%BA%E7%A1%80%E4%B9%8Bslice/</guid>
      <description>slice与数组的关系 slice单词的翻译的名词有薄片，片的意思，动词是切片。所以slice就像数组的一片，他不是一个数组，只有依赖底层数组，slice才有意义，这从slice的定义就可以看出。
slice是一个轻量级的数据结构，翻译过来就是slice就像type xxx struct一样，是一种数据结构，主要构成是：
 指针，指针指向第一个slice元素对应的底层数组元素的地址，要注意的是slice的第一个元素并不一定就是数组的第一个元素。 长度，对应slice中元素的数目。 容量，长度不能超过容量，容量一般是从slice的开始位置到底层数据的结尾位置。  知识点概括  slice的定义在上面部分已经给出 s:=a[i,j],a是一个数组，这个表达式的意思就是创建了一个新的slice，叫做s。引用a的从第i个元素开始，第j-1个元素截止。 s[:],s[:2],s[4:],这种不填索引的情况，代表着直到结尾或者开始。这种操作，叫切片操作。 slice的赋值，传递，都是传递着slice的指针。  func reverse(s []int) { for i, j := 0, len(s)-1; i &amp;lt; j; i, j = i+1, j-1 { s[i], s[j] = s[j], s[i] } } slice的初始化和数组完全类似，只是不指定长度 slice之间不能比较，参考不可比较主要是由于间接引用造成的。slice只能和nil比较 slice为nil，len和cap都是0，但slice非nil，len和cap也可能是0  slice的实现 </description>
    </item>
    
    <item>
      <title>go基础之数组</title>
      <link>http://blog.zhang.today/post/go/go%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/go/go%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E7%BB%84/</guid>
      <description>我认为学习一门语言重要的不是去记一些，如何定义数组，数组什么形式，&amp;hellip;型定义，这些语法的东西，因为计算机语言跟我们用来沟通的语言有很多相似之处，语言的本质是用来交流，我们学习英文会记很多语法，但最后发现也没有因为我们记了这么多语法就能更好的和外国人交流。舍本逐末不仅浪费时间，还消耗精力。我认为更多的时间应该应该放在理解更底层的东西
 知识点概括  数组是固定长度的，在go语言中我们一般用slice代替数组，因为slice可以动态的改变长度。 数组所有元素的类型必须相同。 数组的0值，就是对应数组每个元素的0值。 数组的定义：  var q [3]int = [3]int{1, 2, 3} q := [&amp;hellip;]int{1, 2, 3} a:=[3]int{1,2,3}     注意，在类型判断中，区别array和slice的唯一区别就是array是[3]int,slice是[]int
 数组由两部分组成：长度和数据类型，所以判断两个数组是否相等，一定是长度和数据类型都相等的情况下，每个元素分别相等。 数组也可以像struct那样，字面量初始化。把数组看成是一个  array{ index int obj object }
example := [&amp;hellip;]string{1: &amp;ldquo;$&amp;rdquo;, 2: &amp;ldquo;€&amp;rdquo;, 3: &amp;ldquo;￡&amp;rdquo;, 4: &amp;ldquo;￥&amp;rdquo;}
这里，0的下标为空string。还比如：r := [&amp;hellip;]int{99: -1}，定义了一个含有100个元素的数组r，最后一个元素被初始化为-1，其它元素都是用0初始化。 7. 数组的创建，赋值，传递，都是值的复制。
a:=[3]int{1,2,3} b:=a a[1]=100 fmt.Printf(&amp;#34;a= %v\n&amp;#34;,a) fmt.Printf(&amp;#34;b= %v\n&amp;#34;,b) // output: // a= [1,100,3] // b= [1,2,3] 从数组到slice go语言肯定不是平白无故搞出来一个slice，语言的语法糖的初衷肯定是想要方便我们开发者的，比如es6里那么多好用的语法糖。所以，看到一个新的用法，我们要开始感兴趣，而不是觉得麻烦，不想去学习新东西，因为用起来很可能会提升你的开发效率，事半功倍。</description>
    </item>
    
    <item>
      <title>从gopath到gomod</title>
      <link>http://blog.zhang.today/post/go/%E4%BB%8Egopath%E5%88%B0gomod/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/go/%E4%BB%8Egopath%E5%88%B0gomod/</guid>
      <description>本文不只局限在go语言，想从计算机语言的角度出发，从为什么需要环境变量讲起，一次性讲明白关于go的依赖，环境变量，gomod等一系列概念
 为什么需要环境变量？ 除了html之类的文本标记语言之外，无论是java还是go，又或是别的语言，基本都需要环境变量。我们基本上能看到，每种语言的第一课都是配置环境变量，比如，设置javabin，javahome之类的，go语言的话就是gopath，gobin。
每次配置这些东西，如果没有搞清楚原理，那几乎是遇到问题，就要研究半天，所以这里想一次性讲明白底层的原理。</description>
    </item>
    
    <item>
      <title>计算机系统概览</title>
      <link>http://blog.zhang.today/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%A7%88/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%A7%88/</guid>
      <description> 这篇文章是为了解释计算机中什么是进程而写的，同时也为了复习计算机操作系统的相关知识。
 我们在谈什么？ 当我们在谈计算机系统的时候，我们究竟在谈什么？个人认为，当我们在谈计算机系统的时候，就已经在很大程度上抛开了程序员的某些特性，我们不仅仅是一个写代码的人，同时也是一个设计师，就像我们中国美丽的传说，女娲造人，盘古开天地一样，我们是在设计一整套规则,在这套规则下，一生二二生三三生万物，必须能够自然运转。所以，我们要转变思路，抛开代码里的，01010101011100，设计不是非此即彼，很难做到具象的理解，就像很多漫画科普计算机的文，我觉得其实误区不可谓不大，太难用具体的东西来描述，这时候语言的局限性就来了。如果开发系统，那就去读《unix内核编程》，《计算机操作系统》之类的书，如果想做到整体明白，不妨看看此文。代表个人理解，仅做参考。
在研究计算机系统的过程中，我们常从两个角度分析问题，即：
 从逻辑上讲 从物理上讲  计算机系统概览 以下概念解释非常枯燥，可以先看下一小节hello world，有疑问再回这节找概念 func main() { fmt.Println(&amp;#34;hello world&amp;#34;) } I/O设备 以I/O总线为分界线，下面部分是我们常见的一些鼠标，键盘一些控制器设备或者是适配器。还有储存文件的磁盘，比如这段代码，开始就存在下面的磁盘上。
总线 往上走就是总线，总线负责携带和在各个部件间传递信息。从这句话就能看出总线的意义非常重要，因为计算机执行一段程序的本质就是各个部件间的信息复制和传递。总线每次只能传送一个字到其他部件，这个字就是word，字长。现在一般是64bit。
主存和cpu 主存也就是平常所说的内存，如果电脑突然断电或者重启，那主存的内容也会消失，所以主存是一个临时的存储设备。主存从逻辑上讲，是一个线性的字节数组，每个字节都有其唯一的地址（数组索引），从物理上讲，是一组动态的随机存取储存器芯片组成。这里存放着不同的机器指令
CPU又叫处理器，处理器的核心是一个word的存储设备，称为程序计数器(PC),在任何时候，PC都指向主存中的某条机器语言指令。处理器从PC指向的主存处，读取指令，解释指令中的位，执行该指令A。
寄存器文件是由一些1字长的寄存器组成。
A指令包括但不限于:
 加载,把一个字从主存复制到寄存器，以覆盖寄存器文件原来的内容。 存储，把一个字从寄存器复制到主存的某个位置，以覆盖这个位置上原来的内容。 操作，把两个寄存器复制到ALU，ALU对这两个字做算术操作，并将结果放到一个寄存器中，以覆盖该寄存器中原来的内容。  hello world # hello.go func main() { fmt.Println(&amp;#34;hello world&amp;#34;) } 终于，概念解释完了。我们具体捕捉一下一段程序在这个系统中的踪迹。
这段代码开始是在磁盘里，我们将这段代码经过了编译，链接等各种阶段，把它变成了一个可执行文件，只有变成这种格式的文件，才可以被加载到内存中。当我们在键盘上./hello的时候，计算机将磁盘中的文件内容，copy到了主存。然后等PC指到了这段代码的指令，cpu将对代码进行解释和执行，指令本身是print，那么就是将hello world 复制到寄存器文件，再从寄存器文件中复制到显示器。
注意，以上任何操作都离不开总线，比如最后一步，从寄存器文件到显示器。
这也就是为什么时候说，计算机中执行一段程序，要经过很多次在磁盘等IO设备， 主存，cpu等设备之间的复制。这些设备的复制传递速度不一（根据机械原理，较大的存储设备要比较小的存储设备运行的慢），是导致计算机性能出现瓶颈的原因之一。
总结 理解了以上内容，才能更好的理解进程，线程等概念，才能更好的回答比如，进程和线程之间的关系到底是什么？进程退出了，线程还能运行吗？主线程退出了，其他线程还在吗？下一节将是一些更感性的概念：
 上下文context是什么 进程是一种抽象，是计算机科学中，最成功的最深刻的 概念 之一  </description>
    </item>
    
    <item>
      <title>消息队列nsq工作流程解析（一）---nsqd组件.md</title>
      <link>http://blog.zhang.today/post/go/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97nsq%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90%E4%B8%80-nsqd%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/go/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97nsq%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90%E4%B8%80-nsqd%E7%BB%84%E4%BB%B6/</guid>
      <description> 这系列文章我想从0开始，在读者的心中构建一个完整的nsq消息队列模型 包括但不限于以下知识点
 nsq整体工作流程 nsq各组件工作细节 nsq代码实战 nsq源码解析   那么什么是消息队列呢?我想有必要在学习nsq之前仔细理解。
什么是nsq？ 这篇文章不是讲nsq如何使用，网上已经有很多对nsq消息队列做名词解释的文章了，关于什么是nsq消息队列，这里可能只做简单的复习。
nsq有三个组件，相互配合做到分布式消息队列:
 nsqd nsqlookupd nsqadmin  网上看了很多文档性质的文章，阅读起来给我的感觉是，就好像组装一个机器人，一股脑写清楚了所有的零件用途。但哪个零件是心脏，哪个零件是指甲和头发，并没有特别提到，因此我在看的过程中有很多疑惑。所以想要理解nsq，还需要庖丁解牛，有主次，分块理解
nsq的主体：nsqd组件 现在让我们忘记其他两个组件，一步步分析
其实nsqd组件本身就是一个消息队列，他可以脱离其他组件工作，因此：
令：概念nsq消息队列=nsqd （忽略组件2，3）
举一个例子，用户在订单系统，付款，下订单成功后，可能会通知三个以上的系统，
如下单成功了：
 通知增加某用户积分（积分系统） 通知减掉已被买走的库存数量（库存系统） 通知商家进行发货（发货系统）  订单系统是如何通知nsqd的呢?订单创建成功后，订单系统会给nsqd发送一条&amp;quot;order_succeed&amp;quot;的通知，nsqd会接收到这条通知，然后nsqd又会把这条消息，发送给每个订阅在nsqd上的系统。这条通知&amp;quot;order_succeed&amp;rdquo;，简单理解就是topic的概念。
 预告：nsqd与订单系统如何通信？是tcp还是http？或是其他通信协议
  一个topic就是程序发布消息的一个逻辑键，当程序第一次发布消息时就会创建topic
 这时候我们发现客户越来越多，积分系统需要排队比较久了，我们要做的就是给积分系统分流，也就是扩展积分系统。积分系统可以是一个容器，也可以是一台机器，我们可以加入一个负载均衡的工具，把流量平均的转发到两套积分系统上，给积分系统分流。像这样，
如果其他系统也出校效率问题，也可以效仿积分系统，加一层负责均衡。负载均衡的分流工作都是一套代码，这样做，我们就已经repeat myself了。因此，nsqd中，已经封装了这个负载均衡工具，名字叫做channel。
 channel与消费者相关，是消费者之间的负载均衡，channel在某种意义上来说是一个“队列”。每当一个发布者发送一条消息到一个topic，消息会被复制到所有消费者连接的channel上，消费者通过这个特殊的channel读取消息，实际上，在消费者第一次订阅时就会创建channel。Channel会将消息进行排列，如果没有消费者读取消息，消息首先会在内存中排队，当量太大时就会被保存到磁盘中。
 解释一下图的流程：
订单系统发送一条&amp;quot;order_succeed&amp;quot;的消息到nsqd消息队列，nsqd消息队列会将这条消息复制到所有channel上。channel会做一个负载均衡，按照一定的算法，将这条消息推送到任意的一台消费者实例上。
总结  因为是本系列的第一篇，所以开头讲明了本系列文章的主要框架和之后会涉及到的内容 简单复习重点，nsq的三个组件 重点介绍了nsqd这个组件的相关概念和工作流程，topic，channel这两个重要概念   预告：消息队列如果是单实例的，那简直太危险了，这个实例一挂，我们的所有系统都将瘫痪，因此，下一节将重点介绍如何用另一个nsq的组件nsqlookupd部署一个分布式的消息队列。
 </description>
    </item>
    
    <item>
      <title>hugo搭建及自动部署（二）</title>
      <link>http://blog.zhang.today/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/hugo%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BA%8C/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/hugo%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BA%8C/</guid>
      <description>自动部署 接上篇，将生成的blog静态资源文件部署到服务端。按理说，将html静态资源文件搭配nginx，放到机器上就可以访问了，那这里为什么叫自动部署呢？自动一词体现在哪儿呢？
按照之前的思路：
首先配置基于nginx的静态网站，nginx配置里有个目录，将静态文件放到这个目录下，就能通过端口访问。
 写博客 hugo生成静态文件 删掉服务端旧的静态文件目录，ssh scp到服务端的已经配置好的静态目录  这里给出我的nginx配置，仅供参考
$ cat /etc/nginx/nginx.conf user 用户; worker_processes auto; pid /run/nginx.pid; events { worker_connections 768; # multi_accept on; } include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; server { listen 80; server_name 你的域名.com; root 你的静态文件夹; index index.html; location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){ root /root/blog2020; } location ^~ /webhook { proxy_pass http://localhost:8002; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } } 需要注意这么几个点(配置里面的中文部分)：
 user 用户  这里要注意一个权限的问题，要保证nginx配置文件的权限合理，一般是www-data。这里用户二字要和你的静态文件用户对应,不然就是403。怎么看一个文件属于哪个用户？ll命令</description>
    </item>
    
    <item>
      <title>hugo搭建及自动部署（一）</title>
      <link>http://blog.zhang.today/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/hugo%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%B8%80/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/hugo%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%B8%80/</guid>
      <description>hugo搭建 hugo的本质就是一个小程序，然后这个程序会读取指定的目录结构配置，生成对应的静态资源文件（包括html，css，js）。
关键词：小程序；指定的目录结构；静态资源文件
以下所有步骤都围绕这是三个关键词进行，以下操作可能会遇到git的push不了，hugo因为环境变量不能运行等问题，请自行google
实现关键词一：小程序  因此搭建的第一件事儿就是拿到这个小程序，在计算机上小程序的本质基本都是二进制文件，如windows的exe，linux和mac放在/usr/local/bin里的文件。在这里下载属于你系统的二进制文件。windows并不是很清楚，mac和linux的话，就跟以往一样，把下载到的压缩包解压，拿到hugo文件，移动到/usr/local/bin或者/usr/bin/里面。  补充：mac也可以用brew安装下载，brew install hugo ，但个人认为brew太慢了（可能被墙了），linux可以用apt-get和brew安装下载，但有个前提就是你的linux机器上有apt-get或者brew，apt-get下载到的不一定是新的，brew还需要安装，这一系列事情又需要时间，还有一堆错误等着。
所以，个人推荐，直接用以上二进制的方法去得到这个小程序，这是我尝试过几种方法后的出来的结论，你可以不用花时间尝试了。
# 测试你是否安装成功 $ hugo version 实现关键词二：固定目录结构和文件 得到了hugo程序，那么分解开始说的hugo的本质这句话，就是我们还需要一个目录结构给hugo读取。很显然，hugo会为我们考虑到  # 创建一个给hugo读取文件夹 $ hugo new site yourSiteName 这个yourSiteName就是你网站的名字，文件夹里的内容就是hugo读取用来生成静态资源文件（啰嗦一句给小白，静态资源文件就是一个个网页）的配置。
这时候yourSiteName的文件夹结构，应该如下所示
# yourSiteName的文件夹结构 . ├── archetypes │ └── default.md ├── config.toml ├── content ├── data ├── layouts ├── static └── themes 6 directories, 2 files 到这里先不要急着了解这些文件结构的意义，先跑起来 3. 安装主题 这一步很简单，比如我用的是hugo-swift-theme主题,cd进入到yourSiteName中
$ git submodule add https://github.com/onweru/hugo-swift-theme themes/hugo-swift-theme $ echo &amp;#39;theme = &amp;#34;hugo-swift-theme&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/%E7%B3%BB%E7%BB%9F%E7%A4%BA%E4%BE%8B/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.zhang.today/post/go/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%87%BD%E6%95%B0%E4%B8%8E%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhang.today/post/go/go%E8%AF%AD%E8%A8%80%E7%9A%84%E5%87%BD%E6%95%B0%E4%B8%8E%E6%96%B9%E6%B3%95/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>